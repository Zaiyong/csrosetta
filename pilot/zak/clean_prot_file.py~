#!/usr/bin/env python2.7
## -*- mode:python;tab-width:2;indent-tabs-mode:t;rm-trailing-spaces:t;python-indent:2 -*-
from os.path import basename
import sys
import argparse
from ExampleArgumentParser import ExampleArgumentParser
import bmrb
### toolbox library
import library
from os.path import exists
import cs
import traceback
import fasta
from assignment import noesy
from os import environ
from assignment.knowledge.AATypeShiftDistributionLibrary import AATypeShiftDistributionLibrary
from PDB.Polypeptide import three_to_one
from utility import GaussianDistribution



parser = ExampleArgumentParser(prog=basename(__file__), description="make autoNOE-Rosetta readable chemical shift list from any column based format",
examples=['%(prog)s input.prot -fasta input.fasta | awk \'NF>1{print}\'| sort -n -k 5 > proper.prot'])
parser.add_argument("input", help="A shift file");
parser.add_argument("-check", help="check the CS of protons matching bmrb statistics or not, if not, delete.", action='store_true', default=False);
parser.add_argument("-threshold", help="threshold",type=float,default=0.1);
mutex=parser.add_mutually_exclusive_group()
mutex.add_argument("-fasta",help="figure out the sequence");
library.add_standard_args( parser )

args = parser.parse_args()

target_seq=fasta.read_fasta(args.fasta)
resonance_list=noesy.ResonanceList.read_from_stream( open(args.input,'r') )
resonance_list.set_sequence(target_seq)

if args.check:
	delete_res=[]
	data_library=AATypeShiftDistributionLibrary(target_seq)
	if 'csrosettaDir' not in environ:
		print 'Please setup csrosettaDir to your environment'
		exit()
	list=open(environ['csrosettaDir']+"/database/cs_distribution.txt",'r').readlines()
	for line in list:
		tags=line.split()
		if tags[0]=='Res': continue
		data_library.add_distribution(tags[1],three_to_one(tags[0]),GaussianDistribution(float(tags[6]),float(tags[7])))
	for resonance in resonance_list.itervalues():
		atom=resonance.atom()
		freq=resonance.freq()
		distribution=data_library.by_atom(atom)
		prob=distribution.probability(freq)
		if prob<=args.threshold: delete_res.append(resonance)

for res in delete_res:
	resonance_list.remove_resonance(res)


print resonance_list


