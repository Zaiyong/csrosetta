#
# This is a command file.
#
# To make a new test, all you have to do is:
#   1.  Make a new directory under tests/
#   2.  Put a file like this (named "command") into that directory.
#
# The contents of this file will be passed to the shell (Bash or SSH),
# so any legal shell commands can go in this file.
# Or comments like this one, for that matter.
#
# Variable substiution is done using Python's printf format,
# meaning you need a percent sign, the variable name in parentheses,
# and the letter 's' (for 'string').
#
# Available variables include:
#   workdir     the directory where test input files have been copied,
#               and where test output files should end up.
#   minidir     the base directory where Mini lives
#   database    where the Mini database lives
#   bin         where the Mini binaries live
#   binext      the extension on binary files, like ".linuxgccrelease"
#
# The most important thing is that the test execute in the right directory.
# This is especially true when we're using SSH to execute on other hosts.
# All command files should start with this line:
#

cd %(workdir)s

[ -x %(bin)s/setup_run  ] || exit 1
%(bin)s/setup_run -target gmr137 -method abrelax -target_dir gmr137 -label abrelax1 -dir gmr137_run -run_label abrelax1 -job slurm -database ~/rosetta/rosetta_database/ -bin ~/rosetta/rosetta_source/bin/ -platform linux -comp gcc -extras mpi -nstruct 1000  2>&1 \
    | egrep -vf ../../ignore_list \
    > log1
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

%(bin)s/setup_run -target gmr137 -method abrelax -target_dir gmr137 -label abrelax2 -dir gmr137_run -job moab -platform macos -comp gcc -extras mpi -nstruct 1000 -cst_mapping 2>&1 \
    | egrep -vf ../../ignore_list \
    > log2
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

%(bin)s/setup_run -target gmr137 -method rasrec -target_dir gmr137 -label rasrec1 -dir gmr137_run -run_label rasrec1 -job slurm -database ~/rosetta/rosetta_database/ -bin ~/rosetta/rosetta_source/bin/ -platform linux -com gcc -extras mpi -normalize >&1 \
    | egrep -vf ../../ignore_list \
    > log3
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

%(bin)s/setup_run -target gmr137 -method rasrec -target_dir gmr137 -label rasrec2 -dir gmr137_run -job interactive -extras mpi  2>&1 \
    | egrep -vf ../../ignore_list \
    > log4
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so

%(bin)s/setup_run -target gmr137 -method autoNOE -target_dir gmr137  -dir gmr137_run -job slurm -database ~/rosetta/rosetta_database/ -bin ~/rosetta/rosetta_source/bin/ -platform linux -comp gcc -extras mpi -dcut 5 -combine auto 2>&1 \
    | egrep -vf ../../ignore_list \
    > log5
test "${PIPESTATUS[0]}" != '0' && exit 1 || true  # Check if the first executable in pipe line return error and exit with error code if so
