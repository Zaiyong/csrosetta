#!/usr/bin/env python2.7
##-*- mode:python;tab-width:2;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t;python-indent:2 -*-'

from os.path import basename
import os
import string
import sys
from assignment.noesy import SpinSystem
import fasta

# def aa_strip_couple(aa):
# 	if aa in 'RQEKMPLT':
# 		couple=3
# 	elif aa in 'IV':
# 		couple=4
# 	elif aa=='G':
# 		couple=1
# 	else:
# 		couple=2
# 	return couple

def _filter_by_intra_connection(systems):
# filter the spinsystems by NO. of intra peaks in the spinsystems
	assert len(systems)>1, 'if using intra connection to filter spin systems, NO. of spin systems should be larger than 1'
	max_intra_connection=max([ r.intra_connection() for r in systems])
	best_systems=[]
	for r in systems:
		if r.intra_connection()==max_intra_connection:
			best_systems.append(r)
	return best_systems

def _centroid_spin_systems(systems):
#after filtering by score and intra connections, if there are sill more than one best systems, then just combine them into one
	dim=len(systems[0].strips())*2
	length=len(systems)
	centroid={}
	for name,st in systems[0].strips().iteritems():
		proton_name=name
		label_name=st.label().name()
		centroid[label_name+'H']=[]
		centroid[label_name]=[]
	for sp in systems:
		for name,st in sp.strips().iteritems():
			proton_name=name
			label_name=st.label().name()
			centroid[label_name+'H'].append(st.proton().freq())
			centroid[label_name].append(st.label().freq())
	initial_distance=0.0
	initial_ss_index=0
	for name,value in centroid.iteritems():
		initial_distance+=value[0]**2
	for i in range(0,length):
		mid_distance=0.0
		for name,value in centroid.iteritems():
			mid_distance+=value[i]**2
		if mid_distance<initial_distance:
			initial_ss_index=i
			initial_distance=mid_distance
	return systems[initial_ss_index]

def systems_filtering(resid,seq,resonance_list,crosspeaks,lib,systems):
#to find the best spin system by intra connections and combine
	final_systems=[]
	if len(systems)==0:
		return final_systems
	elif len(systems)==1:
		final_systems=systems[0]
	elif len(systems)>1:#there are more than one spin systems satisfy score function.
		filter_systems=_filter_by_intra_connection(systems)
		if len(filter_systems)==1:
			final_systems=filter_systems[0]
		elif len(filter_systems)>1:#there are more than one spin systems have maximum intra connections.
			final_systems=_centroid_spin_systems(filter_systems)
	return final_systems
