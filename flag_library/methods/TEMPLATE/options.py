##-*- mode:python;tab-width:3;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t;python-indent:3 -*-'from os.path import basenameimport libraryimport automatic_setup# definition of options for the your method using the argparse module of Python 2.7#define target specific options in 'group'if 'group' in locals():	group.add_argument("-template_option", help="this could be your target specific option" );	group.add_argument("-template_file_option", help="this could be your target specific option" );#defin run specific options in 'run_group'if 'run_group' in locals():	run_group.add_argument("-run_template_option", help="here you define your running specific option" );tr = library.Tracer( "template_method" )class TemplateMethod(automatic_setup.BasicMethod):	def __init__(self,name,path):		automatic_setup.BasicMethod.__init__(self,name,path)		self.non_file_options.append('template_option')		self.option2dir['template_file_option']='subdir'   def setup_file_library( self ):		automatic_setup.BasicMethod.setup_file_library( self )		fl = self.file_library		args=self.get_args()		path = flag_lib+"/methods/TEMPLATE/"		# fl.executable  = "minirosetta"		# fl.add_string( "commandline", "-out:file:silent decoys.out @flags_denovo @$CM_FLAGFILE");		# fl.provide_file( "flags", path, "flags_nmr_patches" )		# fl.override("flags", "flags_denovo", '-increase_cycles %f'%float(args.cycle_factor))	def make_target_flags(self, run, setup, filename, flags, subs ):		run.add_subst('CM_TEMPLATE_INPUT',setup.cm_path(self.template_file_option))		flags.write("-in:file:s $CM_TEMPLATE_INPUT")method = TemplateMethod(method_name, method_path)