##-*- mode:python;tab-width:3;indent-tabs-mode:t;show-trailing-whitespace:t;rm-trailing-spaces:t;python-indent:3 -*-'
## make mammoth structure alignments

import string
from glob import glob
from os import dup2,path
from os.path import exists
from os.path import basename
import argparse
import sys
import shutil

### toolbox library
from library import cst_map_to_CB
from library import Tracer
import library
from BasicMethod import BasicMethod
from rdc_library import RDC_Data
import traceback

# definition of options for the method RASREC

group=parser.add_argument_group(title='method-options', description='extra options for method')
group.add_argument("-partners", help="partner-string to specify which chains are docked", default="A_B" );
group.add_argument("-pdb", help="start-pdb with both chains placed randomly" );
group.add_argument("-decoys", help="bunch of starting structures in silent-file format");
group.add_argument("-native", help="supply a native pdb for RMSD calculation" );

tr = Tracer( "docking_base_method" )

# method-based code
class DockingBaseMethod(BasicMethod):
	def __init__(self,name,path):
		BasicMethod.__init__(self,name,path)
		self.non_file_options.append('partners')
		self.option2dir['pdb']='start'
		self.option2dir['decoys']='start'
		self.option2dir['native']='native'

	def make_target_flags(self, run, setup, filename, flags, subs ):
		tr.out("make target flags...")
		args=self.get_args()
		if not args.pdb and not decoys:
			raise library.MissingInput("you need an input structure (pdb or decoys) for method %s"%self.name)
		if args.pdb:
			run.add_subst('CM_INPUT_PDB',setup.cm_path(args.pdb))
			flags.write("-in:file:s $CM_INPUT_PDB\n");
		else:
			run.add_subst('CM_DECOYS',setup.cm_path(args.decoys))
			#flags.write("-in:file:silent $CM_DECOYS");
		
		flags.write("-docking:partners %s\n"%args.partners)


	def setup_file_library( self ):
		BasicMethod.setup_file_library( self )
		fl = self.file_library

		path = flag_lib+"/methods/_docking_base/"
#		fl.provide_file( "patches", path, "nmr_patch" )
#		fl.provide_file( "patches", path, "nmr_relax_patch" )

		fl.executable  = "docking_protocol"
		fl.provide_file( "flags", path, "flags_docking" )
		fl.add_string( "commandline", "@flags_docking @$CM_FLAGFILE");
		
		#alternative to flags.write("-in:file:silent CM_DECOYS" ) up in make_target_flags
		#you could write here: 
		args=self.get_args()
		if args.decoys: 
			fl.add("flags","flags_docking","-in:file:silent $CM_DECOYS")

